#!/bin/bash -x

#Detective Windows Mail
#autor: Adam Borys
#license: GNU

#ver. 0.56


NAZWA_PROGRAMU="Detective Windows 0.56"
IKONA=~/DW/main/graf/DooFi_detective64.png
PLIK_LICENCJA="welcome.txt"

log() { echo $1 >> ${MIEJSCE_ZAPISU}/log.txt && echo $1; }

TM() { echo `date "+%H:%M:%S"`; }

zamontuj_partycje() {
	#wyszukuje wszystkie dyski i partycje win i przypisuje do zmiennnej
	PARTYCJE=$(sudo fdisk -l | 
	#wyszykuje tylko te windosowe 
	grep 'HPFS\|NTFS\|exFAT\|FAT' |
	#pobiera pierwsza kolumne np /dev/sda1/
	awk '{ print $1 }' | 
	#selekcjonuje np. z /dev/sda1 drugi czlon - sda1
	cut -d / -f 3)

	
	[ "$PARTYCJE" == "" ] && { 
		TXT="$(TM) - This computer has no NTFS / FAT disks or I van NOT find it ! Program finished"
		yad --title "${NAZWA_PROGRAMU}" --button="gtk-ok:0" --width 300 --text="<b>${TXT}</b>"
		echo $TXT 
		exit 
	}

	for PARTYCJA_DO_ZAMONTOWANIA in $PARTYCJE
	do
		#jesli w pliku mounts nie istnieje nazwa to nie zamontowany, jesli istniej to zamontowany i nic nie robimy
		if [ ! -n "$(grep ${PARTYCJA_DO_ZAMONTOWANIA} /proc/mounts)" ]
		then
	    		#sprawdzamy czy katalog juz istnieje. Jesli istnieje montujemy 
			if [ -d /media/${PARTYCJA_DO_ZAMONTOWANIA} ]; then 
				sudo mount -r /dev/${PARTYCJA_DO_ZAMONTOWANIA} /media/${PARTYCJA_DO_ZAMONTOWANIA}  
			else 
				#jesli nie istnieje tworzymy go i montujemy
				sudo mkdir /media/${PARTYCJA_DO_ZAMONTOWANIA} 
				sudo mount -r /dev/${PARTYCJA_DO_ZAMONTOWANIA} /media/${PARTYCJA_DO_ZAMONTOWANIA}
			fi	
		fi
	done
	
	#zwraca zamontowane partycje
	echo  $PARTYCJE
}

wyszukaj_partycje_systemowa_win() {

	#wyszukuje z wszystkich partycji win partycje systemowe
	for PARTYCJA in `cat ${MIEJSCE_ZAPISU}/system_info/partitions_win`
	do
		#sprawdzamy czy to nie przypadkowy katalog, sprawdzajac katalogi domyslne windows czy istnieja
		if [ -d /media/${PARTYCJA}/Users/Public/Desktop ] && [ -d /media/${PARTYCJA}/Users/Default/AppData ]
			then
				echo $PARTYCJA >> $MIEJSCE_ZAPISU/system_info/partitions_system_win
				log "5) $(TM) - I found system Windows on disk: ${PARTYCJA}. OK"	
		fi
	done

	#sprawdzamy czy wogole znaleziono jakies dyski systemowe.
	#jesli plik nie istnieje lub jest pusty to koniec
	PLIK="${MIEJSCE_ZAPISU}/system_info/partitions_system_win"
	[ ! -e $PLIK -a ! -s $PLIK ] && { TXT="$(TM) - This computer has NOT disks with operating system Windows or I can NOT find it. Program finished !"; yad --title="${NAZWA_PROGRAMU}" --button="gtk-ok:0" --width 300 --text=$TXT; log $TXT; exit; }
}

wyszukaj_konta_uzytkownikow() {
	#skrypt wyszukuje konta uzytkownikow systemu windows 7 / Vista w katalogu Users

	for PARTYCJA in `cat ${MIEJSCE_ZAPISU}/system_info/partitions_system_win`
	do
		#wyswietla wszystkich uzytkownikow systemu z katalogu Users
			#wyszukuje tylko katalogi (pierwszy znak z wiersza na litere d - directory)
				#pobiera 9 kolumne ktora jest nazwa katalogu okreslajaca nazwe uzytkownika np. admin uzer Public
		UZYTKOWNICY=$( ls -l /media/${PARTYCJA}/Users | grep ^d | cut -d ' ' -f 9 )

		for uzytkownik in $UZYTKOWNICY
		do
			#wyklucza stale katalogi Default i Public . Pozostale to uzytkownicy systemu. Zapisuje w formacie np. sda1:uzytkownik
			if [[ $uzytkownik != "Default" && $uzytkownik != "Public" && $PARTYCJA != "" && $uzytkownik != "" ]]; 
			then 
				echo "${PARTYCJA}:${uzytkownik}" >> ${MIEJSCE_ZAPISU}/system_info/win_users && log "6) $(TM) - I found User's name acount (${uzytkownik}) on ${PARTYCJA} and saved it. OK" || log "I coudn NOT save file: win_users. ERROR."
			fi
		done
		
	done
		#wyklucza stale katalogi Default i Public i wyswietla tylo 9 kolumne z wiersza z nazwa katalogu. Ta nazwa katalogu okresla uzytkownika systemu.
		#awk '($9 !="Default") && ($9 !="Public") { print $9 }' > ${MIEJSCE_ZAPISU}/system_info/win_users && log "6) $(TM) I found User's name acounts on ${PARTYCJA} and saved it. OK" || log "I coudn NOT find User's name acounts on ${PARTYCJA}"
	
	#jesli plik nie istnieje lub jest pusty koniec programu
	PLIK=${MIEJSCE_ZAPISU}/system_info/win_users
	[ ! -e "${PLIK}" -o ! -s "${PLIK}" ] && { TXT="No Windows users acounts on checked disks. Program finished"; yad --title "${NAZWA_PROGRAMU}" --button="gtk-ok:0" --width 300 --text="<b>${TXT}</b>"; log $TXT; exit; }
}

wyswietl_w_gui_uzytkownika_i_dysk() {
	#rozdzielamy sciezke np. sda1:uzytkownik na skladowe i wyswietlamy uzytkownika i dysk 
	while read SCIEZKA
	do
		DYSK=`echo $SCIEZKA | cut -d ':' -f1`
		UZYTKOWNIK=`echo $SCIEZKA | cut -d ':' -f2`
		echo "TRUE $UZYTKOWNIK $DYSK"
	done < ${MIEJSCE_ZAPISU}/system_info/win_users
}


# START program


echo "$(date "+%y-%m-%d %H:%M:%S") - Start program ${NAZWA_PROGRAMU}"

#gui startowe - akceptacja warunkow licencji 
zenity --text-info --title=${NAZWA_PROGRAMU} --filename=$PLIK_LICENCJA --html --checkbox="I read and accept the terms."

echo "$(TM) GUI - Read and accept the terms"

case $? in
    0)
        echo "(TM) GUI - Accept licence"
	;;
    1)
        echo "(TM) GUI - NOT accept licences and stop program"
	exit
	;;
    -1)
	echo "(TM) GUI - NOT accept licences and stop program"
        yad --title "${NAZWA_PROGRAMU}" --button="gtk-ok:0" --width 300 --text="Some unexpected error. Program finished !"
	exit
	;;
esac

echo "$(TM) I mount NTFS disks"

#zwraca zamontowane partycje windows w formacie np. sda1 sda3
PARTYCJE=$(zamontuj_partycje)

echo "$(TM) I mounted disk ${PARTYCJE}"

#gui - podaj nazwe badania
NAZWA_SPRAWY=$(yad --title="$NAZWA_PROGRAMU" --image=$IKONA --text="<b>  Insert name of case</b>" --form --field="Name of case" "First case")

echo "$(TM) GUI - User inserted in GUI name of case: ${NAZWA_SPRAWY}"

#gdy pole jest puste to koniec programu
[ "$NAZWA_SPRAWY" == "" ] && { echo "$(TM) GUI - Name of case inserted in GUI is empty. Finished program"; exit;  }

#usowamy separator | dodany na koncu przez yad
NAZWA_SPRAWY=$(echo $NAZWA_SPRAWY | tr -d "|" )

#zamieniamy spacje na podkreslenia
NAZWA_SPRAWY=$(echo $NAZWA_SPRAWY | tr " " "_")

#data bedzie czescia katalogu. Dzieki temu unikniemy problemow z tymi samymi nazwami katalogow
CZAS_UTWORZENIA=`date "+%y%m%d_%H%M%S"`

#katalog w ktorym beda zapisane wszystkie wyniki z badania systemu
KATALOG_SPRAWY=${NAZWA_SPRAWY}_${CZAS_UTWORZENIA}

#gui - podaj na jakim nosniku/katalogu zapisac badanie
MIEJSCE_ZAPISU=$(yad --file --directory --title="$NAZWA_PROGRAMU" --image=$IKONA --text="<b>  Where to save result ?</b>" --height=380)

echo "$(TM) GUI - Inserted in GUI place to save result: ${MIEJSCE_ZAPISU}"

#gdy pole jest puste to koniec programu
[ "$MIEJSCE_ZAPISU" == "" ] && { echo "$(TM) GUI - Inserted in GUI place to save result is empty. Finished program"; exit; }

#bardzo wazna zmienna. Wszstekie skrypty beda odnosic sie do tego katalogu
#katalog glownym staje sie katalog sprawy
MIEJSCE_ZAPISU="${MIEJSCE_ZAPISU}/${KATALOG_SPRAWY}"

echo "$(TM) Destination folder to save all results: ${MIEJSCE_ZAPISU}"

#tworzy glowne katalogi z podkatalogami
mkdir -p "${MIEJSCE_ZAPISU}/system_info" && mkdir "${MIEJSCE_ZAPISU}/Users" 

#sprawdzamy czy katalogi zostaly utworzone poprawnie 
if [ -d "${MIEJSCE_ZAPISU}/Users" -a -d "${MIEJSCE_ZAPISU}/system_info" ]; then
	log "2) $(TM) - Main folders created correct in ${MIEJSCE_ZAPISU}. OK" 
else
	TXT="Main folders NOT created correct in ${MIEJSCE_ZAPISU}. Error. Program finished"
	yad --title "${NAZWA_PROGRAMU}" --button="gtk-ok:0" --width 300 --text=$TXT
	log "2) $(TM) ${TXT}"
	exit 
fi

#zapisujemy plik z sciezka do katalogu, gdzie beda zapisywane wszystkie wyniki dzialan programu
log "3) $(TM) - I try to save file -> global_path"
echo $MIEJSCE_ZAPISU > "${MIEJSCE_ZAPISU}/system_info/global_path" && log "3) $(TM) - I saved file global_path correct. OK"

#zapisujemy plik z informacja o wszystkich partycjach windowsowych w komputerze 
log "4) $(TM) - I try to save file -> partitions_win"
echo $PARTYCJE > "${MIEJSCE_ZAPISU}/system_info/partitions_win" && log "4) $(TM) - I saved file partitions_win correct. OK"

#wyszukujemy i zapisujemy plik z informacja o partycjach z systemem win, a dokladnie z katalogiem Users
log "5) $(TM) - I look for partitions with Windows system."
wyszukaj_partycje_systemowa_win

#wyszukuje konta uzytkownikow w katalogu Users
log "6) $(TM) - I look for User's acounts on Windows system"
wyszukaj_konta_uzytkownikow

#gui - wyswietla dialog z wyborem kont uzytkownikow  
log "7) $(TM) - I select in GUI users names acounts"
WYBRANI_UZYTKOWNICY=$(yad --list --checklist --title="$NAZWA_PROGRAMU" --text="I found User's data acount on this computer. What User's data acount do you want to copy ?" --width 300 --height 300 --button="gtk-ok:0" --column "" --column "ACOUNT" --column "DISK" $(wyswietl_w_gui_uzytkownika_i_dysk))
#sprawdza czy wybrano cokolwiek, na wyjsciu WYBRANI_UZYTKOWNICY=TRUE|admin|sda1 TRUE|uzytkownik2|sda1
[[ "$WYBRANI_UZYTKOWNICY" != "" ]] && log "7) $(TM) - I selected users names acounts ${WYBRANI_UZYTKOWNICY}" || { TXT= "7) $(TM) No selected users names acounts. Finish program"; log $TXT; yad --title "${NAZWA_PROGRAMU}" --button="gtk-ok:0" --width 300 --text="${TXT}"; exit; }
#na wyjsciu np WYBRANI_UZYTKOWNICY=TRUE|admin|sda1 TRUE|uzytkownik2|sda1

#wczytuje plik do obslugi poczty
./wyszukaj_poczte "$WYBRANI_UZYTKOWNICY" "$MIEJSCE_ZAPISU"

# oddzielamy wybrane konta od siebie spacjÄ…; np na wyjsciu WYBRANI_UZYTKOWNICY=TRUE|admin|sda1 TRUE|uzytkownik2|sda1
for UZYTKOWNIK in `echo $WYBRANI_UZYTKOWNICY | awk -F" " '{ print }'`
do
	# oddzielamy wybrane konta od siebie | np na wyjsciu UZYTKOWNIK2=TRUE|admin|sda1
	for UZYTKOWNIK2 in `echo $UZYTKOWNIK | cut -d '|' -f2`
	do
		for KLIENT_POCZTY in Outlook WLM Thunderbird
		do 
			log "8) $(TM) I preaper to run script to search email client ${KLIENT_POCZTY} for user ${UZYTKOWNIK2}"
			./wyszukaj_poczte $UZYTKOWNIK2 $KLIENT_POCZTY $MIEJSCE_ZAPISU
		done
	done
done







